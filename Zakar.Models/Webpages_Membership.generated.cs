#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;

namespace Zakar.Models	
{
	[Table("webpages_Membership", SchemaName = "dbo")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	public partial class Webpages_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _userId;
		[Column("UserId", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_userId")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int UserId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if(this._userId != value)
				{
					this.OnPropertyChanging("UserId");
					this._userId = value;
					this.OnPropertyChanged("UserId");
				}
			}
		}
		
		private DateTime? _createDate;
		[Column("CreateDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_createDate")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? CreateDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if(this._createDate != value)
				{
					this.OnPropertyChanging("CreateDate");
					this._createDate = value;
					this.OnPropertyChanged("CreateDate");
				}
			}
		}
		
		private string _confirmationToken;
		[Column("ConfirmationToken", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_confirmationToken")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public virtual string ConfirmationToken
		{
			get
			{
				return this._confirmationToken;
			}
			set
			{
				if(this._confirmationToken != value)
				{
					this.OnPropertyChanging("ConfirmationToken");
					this._confirmationToken = value;
					this.OnPropertyChanged("ConfirmationToken");
				}
			}
		}
		
		private bool? _isConfirmed;
		[Column("IsConfirmed", OpenAccessType = OpenAccessType.Bit, IsNullable = true, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("_isConfirmed")]
		public virtual bool? IsConfirmed
		{
			get
			{
				return this._isConfirmed;
			}
			set
			{
				if(this._isConfirmed != value)
				{
					this.OnPropertyChanging("IsConfirmed");
					this._isConfirmed = value;
					this.OnPropertyChanged("IsConfirmed");
				}
			}
		}
		
		private DateTime? _lastPasswordFailureDate;
		[Column("LastPasswordFailureDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_lastPasswordFailureDate")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? LastPasswordFailureDate
		{
			get
			{
				return this._lastPasswordFailureDate;
			}
			set
			{
				if(this._lastPasswordFailureDate != value)
				{
					this.OnPropertyChanging("LastPasswordFailureDate");
					this._lastPasswordFailureDate = value;
					this.OnPropertyChanged("LastPasswordFailureDate");
				}
			}
		}
		
		private int _passwordFailuresSinceLastSuccess;
		[Column("PasswordFailuresSinceLastSuccess", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_passwordFailuresSinceLastSuccess")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int PasswordFailuresSinceLastSuccess
		{
			get
			{
				return this._passwordFailuresSinceLastSuccess;
			}
			set
			{
				if(this._passwordFailuresSinceLastSuccess != value)
				{
					this.OnPropertyChanging("PasswordFailuresSinceLastSuccess");
					this._passwordFailuresSinceLastSuccess = value;
					this.OnPropertyChanged("PasswordFailuresSinceLastSuccess");
				}
			}
		}
		
		private string _password;
		[Column("Password", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_password")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Password
		{
			get
			{
				return this._password;
			}
			set
			{
				if(this._password != value)
				{
					this.OnPropertyChanging("Password");
					this._password = value;
					this.OnPropertyChanged("Password");
				}
			}
		}
		
		private DateTime? _passwordChangedDate;
		[Column("PasswordChangedDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_passwordChangedDate")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PasswordChangedDate
		{
			get
			{
				return this._passwordChangedDate;
			}
			set
			{
				if(this._passwordChangedDate != value)
				{
					this.OnPropertyChanging("PasswordChangedDate");
					this._passwordChangedDate = value;
					this.OnPropertyChanged("PasswordChangedDate");
				}
			}
		}
		
		private string _passwordSalt;
		[Column("PasswordSalt", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_passwordSalt")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string PasswordSalt
		{
			get
			{
				return this._passwordSalt;
			}
			set
			{
				if(this._passwordSalt != value)
				{
					this.OnPropertyChanging("PasswordSalt");
					this._passwordSalt = value;
					this.OnPropertyChanged("PasswordSalt");
				}
			}
		}
		
		private string _passwordVerificationToken;
		[Column("PasswordVerificationToken", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 128, Scale = 0, SqlType = "nvarchar")]
		[Storage("_passwordVerificationToken")]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public virtual string PasswordVerificationToken
		{
			get
			{
				return this._passwordVerificationToken;
			}
			set
			{
				if(this._passwordVerificationToken != value)
				{
					this.OnPropertyChanging("PasswordVerificationToken");
					this._passwordVerificationToken = value;
					this.OnPropertyChanged("PasswordVerificationToken");
				}
			}
		}
		
		private DateTime? _passwordVerificationTokenExpirationDate;
		[Column("PasswordVerificationTokenExpirationDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_passwordVerificationTokenExpirationDate")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PasswordVerificationTokenExpirationDate
		{
			get
			{
				return this._passwordVerificationTokenExpirationDate;
			}
			set
			{
				if(this._passwordVerificationTokenExpirationDate != value)
				{
					this.OnPropertyChanging("PasswordVerificationTokenExpirationDate");
					this._passwordVerificationTokenExpirationDate = value;
					this.OnPropertyChanged("PasswordVerificationTokenExpirationDate");
				}
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
