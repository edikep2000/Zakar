#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ClassGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using System.ComponentModel;
using Zakar.Models;

namespace Zakar.Models	
{
	[Table("NonValidatedPartnershipRecords", SchemaName = "dbo")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class NonValidatedPartnershipRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		private int _id;
		[Column("Id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_id")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual int Id
		{
			get
			{
				return this._id;
			}
			set
			{
				if(this._id != value)
				{
					this.OnPropertyChanging("Id");
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		private int _partnershipArm;
		[Column("PartnershipArm", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_partnershipArm")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int PartnershipArm
		{
			get
			{
				return this._partnershipArm;
			}
			set
			{
				if(this._partnershipArm != value)
				{
					this.OnPropertyChanging("PartnershipArm");
					this._partnershipArm = value;
					this.OnPropertyChanged("PartnershipArm");
				}
			}
		}
		
		private int _partner;
		[Column("Partner", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_partner")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Partner
		{
			get
			{
				return this._partner;
			}
			set
			{
				if(this._partner != value)
				{
					this.OnPropertyChanging("Partner");
					this._partner = value;
					this.OnPropertyChanged("Partner");
				}
			}
		}
		
		private decimal _amount;
		[Column("Amount", OpenAccessType = OpenAccessType.Decimal, Length = 18, Scale = 2, SqlType = "decimal")]
		[Storage("_amount")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if(this._amount != value)
				{
					this.OnPropertyChanging("Amount");
					this._amount = value;
					this.OnPropertyChanged("Amount");
				}
			}
		}
		
		private int _month;
		[Column("Month", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_month")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Month
		{
			get
			{
				return this._month;
			}
			set
			{
				if(this._month != value)
				{
					this.OnPropertyChanging("Month");
					this._month = value;
					this.OnPropertyChanged("Month");
				}
			}
		}
		
		private int _year;
		[Column("Year", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_year")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Year
		{
			get
			{
				return this._year;
			}
			set
			{
				if(this._year != value)
				{
					this.OnPropertyChanging("Year");
					this._year = value;
					this.OnPropertyChanged("Year");
				}
			}
		}
		
		private int _currency;
		[Column("Currency", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_currency")]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Currency
		{
			get
			{
				return this._currency;
			}
			set
			{
				if(this._currency != value)
				{
					this.OnPropertyChanging("Currency");
					this._currency = value;
					this.OnPropertyChanged("Currency");
				}
			}
		}
		
		private DateTime _dateCreated;
		[Column("DateCreated", OpenAccessType = OpenAccessType.DateTime, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("_dateCreated")]
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime DateCreated
		{
			get
			{
				return this._dateCreated;
			}
			set
			{
				if(this._dateCreated != value)
				{
					this.OnPropertyChanging("DateCreated");
					this._dateCreated = value;
					this.OnPropertyChanged("DateCreated");
				}
			}
		}
		
		private PartnershipArm _partnershipArm1;
		[ForeignKeyAssociation(ConstraintName = "FK_NonValidatedPartnershipRecords_PartnershipArms", SharedFields = "PartnershipArm", TargetFields = "Id")]
		[Storage("_partnershipArm1")]
		public virtual PartnershipArm PartnershipArm1
		{
			get
			{
				return this._partnershipArm1;
			}
			set
			{
				if(this._partnershipArm1 != value)
				{
					this.OnPropertyChanging("PartnershipArm1");
					this._partnershipArm1 = value;
					this.OnPropertyChanged("PartnershipArm1");
				}
			}
		}
		
		private Partner _partner1;
		[ForeignKeyAssociation(ConstraintName = "FK_NonValidatedPartnershipRecords_Partners", SharedFields = "Partner", TargetFields = "Id")]
		[Storage("_partner1")]
		public virtual Partner Partner1
		{
			get
			{
				return this._partner1;
			}
			set
			{
				if(this._partner1 != value)
				{
					this.OnPropertyChanging("Partner1");
					this._partner1 = value;
					this.OnPropertyChanged("Partner1");
				}
			}
		}
		
		#region INotifyPropertyChanging members
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanging(string propertyName)
		{
			if(this.PropertyChanging != null)
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
	}
}
#pragma warning restore 1591
